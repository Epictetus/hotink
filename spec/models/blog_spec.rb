require 'spec_helper'
require "paperclip/matchers"

describe Blog do
  include Paperclip::Shoulda::Matchers
  
  before(:each) do
    @blog = Blog.create!(Factory.attributes_for(:blog))
  end
  
  it { should belong_to(:account) }
  it { should validate_presence_of(:account) }
  
  it { should validate_presence_of(:title) }
  it { should validate_uniqueness_of(:title).scoped_to(:account_id) }
  
  describe "slug" do
    it { should validate_uniqueness_of(:slug).scoped_to(:account_id) } 
    it { should have_db_index(:slug) }
    
    it "should be a uri-friendly string" do
      should_not allow_value("").for(:slug)
      should allow_value("theblog123").for(:slug)
      should allow_value("the-blog-123").for(:slug)
      should_not allow_value("the#blog").for(:slug)
      should_not allow_value("the blog").for(:slug)
      should_not allow_value("the'blog").for(:slug)
      should_not allow_value("TheBlog").for(:slug)      
    end
    
    it "should auto-generate slug if none exists" do
      blog = Factory(:blog, :title => "Exciting! Blogger's paradise")
      blog.slug.should eql("exciting-bloggers-paradise")
    end
    
    it "should allow autogenerated slug to be overridden by user" do
      blog = Factory(:blog, :title => "Exciting! Blogger's paradise")
      blog.slug = "bloggers-paradise"
      blog.save
      blog.slug.should eql("bloggers-paradise")
    end
    
    it "should ignore blank slug submitted by user" do
      blog = Factory(:blog, :title => "Exciting! Blogger's paradise", :slug => "")
      blog.slug.should eql("exciting-bloggers-paradise")
      blog.slug = ""
      blog.save
      blog.slug.should eql("exciting-bloggers-paradise")
    end
    
    it "should raise error on invalid slug" do
      blog = Factory(:blog, :title => "Exciting! Blogger's paradise")
      blog.slug = "Blogger's paradise"
      lambda { blog.save! }.should raise_error(ActiveRecord::RecordInvalid)
    end
    
  
  end

  describe "state" do
    it "should not be active by default" do
      @blog.should_not be_active
    end
    
    it "should be activatable" do
      @blog.activate
      @blog.should be_active
    end

    it "should be deactivatable" do
      @blog.write_attribute(:status, true)
      @blog.deactivate
      @blog.should_not be_active
    end
    
    it "should tell active blogs from inactive blogs" do
      blog2 = Factory(:blog, :title => "Exciting! Blogger's paradise") 
      blog2.activate
      
      @blog.deactivate
      
      Blog.active.should eql([blog2])
      Blog.inactive.should eql([@blog])      
      
    end
  end

  it "should have blog image" do
     Blog.should have_attached_file(:image)
     Blog.should validate_attachment_content_type(:image).allowing('image/png', 'image/jpeg', 'image/gif').rejecting('text/plain', 'text/xml')
  end

end
